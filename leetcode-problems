def intToRoman(num):
        """
        :type num: int
        :rtype: str
        """
        # Restated problem: Write a function to convert any integer in the range 1 to 3999 to           
	# its roman numeral equivalent. 
        # Additional questions: What happens to digits that are zero?
        # Assumptions: Input will be between 1 and 3999
        # My first thought is that I want a list of all the symbols and their values - maybe a         
	# dictionary for faster lookup?
        # One solution could be to just get each individual digit, check its value, and add the         
	# corresponding symbol to a result string, but this sounds like it would take a lot of         
	# loops and if statements, which isn't too elegant
        # Instead, I can check if and how many times the given number will use each symbol by           
	# dividing it by the symbol's corresponding value, then I can add the symbol as many 
        # times as it appears to a result string.
        # Then, to get the next part of the number, I can subtract the part I already looked 
        # at, which will be the symbol's value multiplied by the digit
        roman_numeral = ""
        # Not gonna use a dictionary because I want to always go in the same order
        symbols = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
        values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        
        # Loop through all the values
        for i in range(len(values)):
            # find the number of times this particular symbol is being used
            y = num // values[i]
            # add that symbol y number of times to the result string
            roman_numeral += y * symbols[i]
            # get rid of the part of the number we already looked at
            num -= values[i] * y
        
        return roman_numeral
        
        # I think this is a pretty strong solution because it's O(n) time complexity, which is         
	# better than my naive solution would've been

def isPalindrome(num):
        """
        :type num: int
        :rtype: bool
        """
        # Restated problem: Write a function to determine if an integer reads the same backwards
        # as it does forwards. 
        # Additional questions: Can negative numbers be palindromes considering they have a negative
        # sign in front? Is a single digit a palindrome?
        # Assumptions: Output is a bool, negative numbers can't be palindromes, single digits do count
        # as palindromes.
        # So the easiest way to do this would be to turn num into a string so we can look at each 
        # digit individually, then add each digit to a "backwards number" string and compare it
        # to our first string. 
        # An improvement to this would be to check if the first digit is the same as the last digit 
        # and work our way inwards, ending when we've reached the middle. This would save space since we
        # wouldn't have to create another string for comparison.
        # I also know that any number that's less than zero, or ends in 0 and isn't 0, won't be a 
        # palindrome.

        if num < 0 or (num % 10 == 0 and num != 0):
            return False
        
        num = str(num)
        i = 0
        while i < len(num) / 2:
            if num[i] != num[-i-1]:
                return False
            i += 1
        return True

        # I think this is a pretty strong solution as well, since we aren't using any space and the 
        # time complexity is O(n)