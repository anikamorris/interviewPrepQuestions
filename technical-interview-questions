Stock Prices
I grabbed Apple's stock prices from yesterday and put them in a list called stock_prices, where:

The indices are the time (in minutes) past trade opening time, which was 9:30am local time.
The values are the price (in US dollars) of one share of Apple stock at that time.
So if the stock cost $500 at 10:30am, that means stock_prices[60] = 500.

Write an efficient function that takes stock_prices and returns the best profit I could have made from one purchase and one sale of one share of Apple stock yesterday.

For example:

  stock_prices = [10, 7, 5, 8, 11, 9]

get_max_profit(stock_prices)
# Returns 6 (buying for $5 and selling for $11)

No "shorting"—you need to buy before you can sell. Also, you can't buy and sell in the same time step—at least 1 minute has to pass.

# find largest number in the list
# find smallest number that comes before that 
# return the difference

def get_max_profit(price_array):
    max = 0
    max_index = 0
    min = 0
    for i in range(len(price_array)):
        if price_array[i] > max:
            max = price_array[i]
            max_index = i
    min = max
    for i in range(max_index):
        if price_array[i] < min:
            min = price_array[i]
    return (max - min)


MakeBricks

We want to make a row of bricks that is goal inches long. 
We have a number of small bricks (1 inch each) and big bricks (5 inches each). 
Return True if it is possible to make the goal by choosing from the given bricks. 
This is a little harder than it looks and can be done without any loops.

make_bricks(3, 1, 8) → True
make_bricks(3, 1, 9) → False
make_bricks(3, 2, 10) → True

def make_bricks(small, big, goal):
  if (small + big * 5 >= goal):
    return (small >= goal % 5)
  else:
    return False


NoTeenSum

Given 3 int values, a b c, return their sum. 
However, if any of the values is a teen -- in the range 13..19 inclusive -- 
then that value counts as 0, except 15 and 16 do not count as a teens. 
Write a separate helper "def fix_teen(n):"that takes in an int value and returns
that value fixed for the teen rule.

def no_teen_sum(a, b, c):
  return fix_teen(a) + fix_teen(b) + fix_teen(c)
  
def fix_teen(n):
  if n == 15 or n == 16:
    return n
    
  if n <= 19 and n >= 13:
    return 0
    
  return n


RoundSum

For this problem, we'll round an int value up to the next multiple of 10 if its 
rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the 
previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. 
Given 3 ints, a b c, return the sum of their rounded values.

def round_sum(a, b, c):
  return round10(a) + round10(b) + round10(c)
  
def round10(num):
  if num % 10 >= 5:
    return num + 10 - num % 10
  else:
    return num - num % 10


CloseFar

Given three ints, a b c, return True if one of b or c is "close" (differing from a by at most 1), 
while the other is "far", differing from both other values by 2 or more. Note: abs(num) 
computes the absolute value of a number.

close_far(1, 2, 10) → True
close_far(1, 2, 3) → False
close_far(4, 1, 3) → True

def close_far(a, b, c):
  if (abs(a - b) <= 1):
    if (abs(a - c) >= 2 and abs(b - c) >= 2):
      return True
    else:
      return False
  
  if (abs(a - c) <= 1 and abs(b - c) >= 2):
    return True

  return False


MakeChocolate

We want make a package of goal kilos of chocolate. 
We have small bars (1 kilo each) and big bars (5 kilos each). 
Return the number of small bars to use, assuming we always use big bars before small bars. 
Return -1 if it can't be done.

make_chocolate(4, 1, 9) → 4
make_chocolate(4, 1, 10) → -1
make_chocolate(4, 1, 7) → 2

def make_chocolate(small, big, goal):
  if goal >= 5:
      if goal / 5 >= big:
          goal -= big * 5
      else:
          goal = goal % 5

  if goal <= small:
    return goal
  
  return -1


Sum13

Return the sum of the numbers in the array, returning 0 for an empty array. 
Except the number 13 is very unlucky, so it does not count and numbers that come 
immediately after a 13 also do not count.

sum13([1, 2, 2, 1]) → 6
sum13([1, 1]) → 2
sum13([1, 2, 2, 1, 13]) → 6

def sum13(nums):
  if len(nums) == 0:
    return 0
    
  for i in range(0, len(nums)):
    if nums[i] == 13:
      nums[i] = 0
      if i+1 < len(nums): 
        nums[i+1] = 0
        
  return sum(nums)


Sum67

Return the sum of the numbers in the array, except ignore sections of numbers starting 
with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). 
Return 0 for no numbers.

sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4

def sum67(nums):
  for i in range(0, len(nums)):
    if nums[i] == 6:
      nums[i] = 0
      for k in range(i, len(nums)):
        if nums[k] == 7:
          nums[k] = 0
          break
        else:
          nums[k] = 0
          
  sum = 0
  for j in range(0, len(nums)):
    sum += nums[j]
      
  return sum


xyzThere

Return True if the given string contains an appearance of "xyz" where the xyz is 
not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.

xyz_there('abcxyz') → True
xyz_there('abc.xyz') → False
xyz_there('xyz.abc') → True

def xyz_there(str):
  if str[0:3] == "xyz":
    return True
  for i in range(len(str) - 3):
    if str[i] != "." and str[i+1:i+4] == "xyz":
      return True
  return False


StringMatch

Given 2 strings, a and b, return the number of the positions where they contain the 
same length 2 substring. So "xxcaazz" and "xxbaaz" yields 3, since the "xx", "aa", 
and "az" substrings appear in the same place in both strings.

string_match('xxcaazz', 'xxbaaz') → 3
string_match('abc', 'abc') → 2
string_match('abc', 'axc') → 0

def string_match(a, b):
  count = 0 #initializes count variable to zero
  shorter = min(len(a),len(b)); """initializes shorter variable to the length of
  the shorter string"""
  for i in range(shorter-1): #loops through the length of the shorter string
    if a[i:i+2] == b[i:i+2]: #checks if each set of 2 characters matches in both strings
      count += 1 #if so, increments count by 1
      
  return count #returns how many matches there are 
